#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

combos {
    compatible = "zmk,combos";

    /* 子音 + 母音コンボ */
    ka_combo { bindings = <&kp K &kp A>; key-positions = <14 25>; layers = <0>; };
    ki_combo { bindings = <&kp K &kp I>; key-positions = <14 23>; layers = <0>; };
    ku_combo { bindings = <&kp K &kp U>; key-positions = <14 8>; layers = <0>; };
    ke_combo { bindings = <&kp K &kp E>; key-positions = <14 24>; layers = <0>; };
    ko_combo { bindings = <&kp K &kp O>; key-positions = <14 9>; layers = <0>; };

    sa_combo { bindings = <&kp S &kp A>; key-positions = <15 25>; layers = <0>; };
    si_combo { bindings = <&kp S &kp I>; key-positions = <15 23>; layers = <0>; };
    su_combo { bindings = <&kp S &kp U>; key-positions = <15 8>; layers = <0>; };
    se_combo { bindings = <&kp S &kp E>; key-positions = <15 24>; layers = <0>; };
    so_combo { bindings = <&kp S &kp O>; key-positions = <15 9>; layers = <0>; };

    ta_combo { bindings = <&kp T &kp A>; key-positions = <16 25>; layers = <0>; };
    ti_combo { bindings = <&kp T &kp I>; key-positions = <16 23>; layers = <0>; };
    tu_combo { bindings = <&kp T &kp U>; key-positions = <16 8>; layers = <0>; };
    te_combo { bindings = <&kp T &kp E>; key-positions = <16 24>; layers = <0>; };
    to_combo { bindings = <&kp T &kp O>; key-positions = <16 9>; layers = <0>; };

    na_combo { bindings = <&kp N &kp A>; key-positions = <17 25>; layers = <0>; };
    ni_combo { bindings = <&kp N &kp I>; key-positions = <17 23>; layers = <0>; };
    nu_combo { bindings = <&kp N &kp U>; key-positions = <17 8>; layers = <0>; };
    ne_combo { bindings = <&kp N &kp E>; key-positions = <17 24>; layers = <0>; };
    no_combo { bindings = <&kp N &kp O>; key-positions = <17 9>; layers = <0>; };

    ha_combo { bindings = <&kp H &kp A>; key-positions = <18 25>; layers = <0>; };
    hi_combo { bindings = <&kp H &kp I>; key-positions = <18 23>; layers = <0>; };
    hu_combo { bindings = <&kp H &kp U>; key-positions = <18 8>; layers = <0>; };
    he_combo { bindings = <&kp H &kp E>; key-positions = <18 24>; layers = <0>; };
    ho_combo { bindings = <&kp H &kp O>; key-positions = <18 9>; layers = <0>; };

    ma_combo { bindings = <&kp M &kp A>; key-positions = <19 25>; layers = <0>; };
    mi_combo { bindings = <&kp M &kp I>; key-positions = <19 23>; layers = <0>; };
    mu_combo { bindings = <&kp M &kp U>; key-positions = <19 8>; layers = <0>; };
    me_combo { bindings = <&kp M &kp E>; key-positions = <19 24>; layers = <0>; };
    mo_combo { bindings = <&kp M &kp O>; key-positions = <19 9>; layers = <0>; };

    ya_combo { bindings = <&kp Y &kp A>; key-positions = <20 25>; layers = <0>; };
    yu_combo { bindings = <&kp Y &kp U>; key-positions = <20 8>; layers = <0>; };
    yo_combo { bindings = <&kp Y &kp O>; key-positions = <20 9>; layers = <0>; };

    ra_combo { bindings = <&kp R &kp A>; key-positions = <21 25>; layers = <0>; };
    ri_combo { bindings = <&kp R &kp I>; key-positions = <21 23>; layers = <0>; };
    ru_combo { bindings = <&kp R &kp U>; key-positions = <21 8>; layers = <0>; };
    re_combo { bindings = <&kp R &kp E>; key-positions = <21 24>; layers = <0>; };
    ro_combo { bindings = <&kp R &kp O>; key-positions = <21 9>; layers = <0>; };

    wa_combo { bindings = <&kp W &kp A>; key-positions = <22 25>; layers = <0>; };
    wo_combo { bindings = <&kp W &kp O>; key-positions = <22 9>; layers = <0>; };

    ga_combo { bindings = <&kp G &kp A>; key-positions = <23 25>; layers = <0>; };
    gi_combo { bindings = <&kp G &kp I>; key-positions = <23 23>; layers = <0>; };
    gu_combo { bindings = <&kp G &kp U>; key-positions = <23 8>; layers = <0>; };
    ge_combo { bindings = <&kp G &kp E>; key-positions = <23 24>; layers = <0>; };
    go_combo { bindings = <&kp G &kp O>; key-positions = <23 9>; layers = <0>; };

    ba_combo { bindings = <&kp B &kp A>; key-positions = <24 25>; layers = <0>; };
    bi_combo { bindings = <&kp B &kp I>; key-positions = <24 23>; layers = <0>; };
    bu_combo { bindings = <&kp B &kp U>; key-positions = <24 8>; layers = <0>; };
    be_combo { bindings = <&kp B &kp E>; key-positions = <24 24>; layers = <0>; };
    bo_combo { bindings = <&kp B &kp O>; key-positions = <24 9>; layers = <0>; };

    pa_combo { bindings = <&kp P &kp A>; key-positions = <25 25>; layers = <0>; };
    pi_combo { bindings = <&kp P &kp I>; key-positions = <25 23>; layers = <0>; };
    pu_combo { bindings = <&kp P &kp U>; key-positions = <25 8>; layers = <0>; };
    pe_combo { bindings = <&kp P &kp E>; key-positions = <25 24>; layers = <0>; };
    po_combo { bindings = <&kp P &kp O>; key-positions = <25 9>; layers = <0>; };

    /* 特殊スペースコンボ */
    k_space_to_g { bindings = <&kp G>; key-positions = <14 7>; layers = <0>; };
    s_space_to_z { bindings = <&kp Z>; key-positions = <15 7>; layers = <0>; };
    t_space_to_d { bindings = <&kp D>; key-positions = <16 7>; layers = <0>; };
    h_space_to_b { bindings = <&kp B>; key-positions = <18 7>; layers = <0>; };
    f_space_to_p { bindings = <&kp P>; key-positions = <25 7>; layers = <0>; };

    /* 子音 + Y + 母音 */
    kya_combo { bindings = <&kp K &kp Y &kp A>; key-positions = <14 20 25>; layers = <0>; };
    kyi_combo { bindings = <&kp K &kp Y &kp I>; key-positions = <14 20 23>; layers = <0>; };
    kyu_combo { bindings = <&kp K &kp Y &kp U>; key-positions = <14 20 8>; layers = <0>; };
    kyo_combo { bindings = <&kp K &kp Y &kp O>; key-positions = <14 20 9>; layers = <0>; };
    sya_combo { bindings = <&kp S &kp Y &kp A>; key-positions = <15 20 25>; layers = <0>; };
    syi_combo { bindings = <&kp S &kp Y &kp I>; key-positions = <15 20 23>; layers = <0>; };
    syu_combo { bindings = <&kp S &kp Y &kp U>; key-positions = <15 20 8>; layers = <0>; };
    syo_combo { bindings = <&kp S &kp Y &kp O>; key-positions = <15 20 9>; layers = <0>; };
    nya_combo { bindings = <&kp N &kp Y &kp A>; key-positions = <17 20 25>; layers = <0>; };
    nyi_combo { bindings = <&kp N &kp Y &kp I>; key-positions = <17 20 23>; layers = <0>; };
    nyu_combo { bindings = <&kp N &kp Y &kp U>; key-positions = <17 20 8>; layers = <0>; };
    nyo_combo { bindings = <&kp N &kp Y &kp O>; key-positions = <17 20 9>; layers = <0>; };
    hya_combo { bindings = <&kp H &kp Y &kp A>; key-positions = <18 20 25>; layers = <0>; };
    hyi_combo { bindings = <&kp H &kp Y &kp I>; key-positions = <18 20 23>; layers = <0>; };
    hyu_combo { bindings = <&kp H &kp Y &kp U>; key-positions = <18 20 8>; layers = <0>; };
    hyo_combo { bindings = <&kp H &kp Y &kp O>; key-positions = <18 20 9>; layers = <0>; };
    mya_combo { bindings = <&kp M &kp Y &kp A>; key-positions = <19 20 25>; layers = <0>; };
    myi_combo { bindings = <&kp M &kp Y &kp I>; key-positions = <19 20 23>; layers = <0>; };
    myu_combo { bindings = <&kp M &kp Y &kp U>; key-positions = <19 20 8>; layers = <0>; };
    myo_combo { bindings = <&kp M &kp Y &kp O>; key-positions = <19 20 9>; layers = <0>; };
    rya_combo { bindings = <&kp R &kp Y &kp A>; key-positions = <21 20 25>; layers = <0>; };
    ryi_combo { bindings = <&kp R &kp Y &kp I>; key-positions = <21 20 23>; layers = <0>; };
    ryu_combo { bindings = <&kp R &kp Y &kp U>; key-positions = <21 20 8>; layers = <0>; };
    ryo_combo { bindings = <&kp R &kp Y &kp O>; key-positions = <21 20 9>; layers = <0>; };

    /* 文字 + ENTER -> NN */
    any_enter_to_nn {
        bindings = <&nn_macro>;
        key-positions = <42 13>; /* 42 = Any key, 13 = ENTER */
        layers = <0>;
    };
};

macros {
    /* NN マクロ */
    nn_macro {
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        bindings = <&kp N &kp N>;
        label = "NN_MACRO";
    };
};




    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESC         &kp Q  &kp W  &kp R      &kp N               &kp F                                   &kp UP                &kp J             &kp U            &kp O         &kp L    &kp P     &kp LEFT_BRACKET
&mt LCTRL TAB   &kp K  &kp S  &kp T      &kp H               &kp M                         &kp LEFT  &kp ENTER  &kp RIGHT  &kp G             &kp I            &kp E         &kp A    &kp Y     &kp RIGHT_BRACKET
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C      &kp V               &kp B           &bt BT_NXT              &kp DOWN              &kp MINUS         &kp D            &kp COMMA     &kp DOT  &kp FSLH  &kp ESC
                              &kp SPACE  &lt 1 INT_MUHENKAN  &kp INT_HENKAN                                                &lt 3 LA(K_UNDO)  &lt 2 BACKSPACE  &kp KP_ENTER
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans         &kp N1     &kp N2     &kp N3        &kp N4     &kp N5                                   &mmv MOVE_UP                     &kp N6        &kp N7       &kp N8         &kp N9    &kp N0         &kp AT_SIGN
&kp LS(LG(S))  &kp LC(K)  &kp LC(S)  &kp LC(D)     &kp LC(F)  &kp LC(G)                &mmv MOVE_LEFT  &none           &mmv MOVE_RIGHT  &kp LEFT      &mkp LCLK    &mkp MB3       &mkp MB2  &kp SEMICOLON  &kp COLON
&kp LG(TAB)    &kp LC(Z)  &kp LC(X)  &kp LC(C)     &kp LC(V)  &kp LC(B)  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp LC(K)     &kp PAGE_UP  &kp PAGE_DOWN  &td0      &kp SLASH      &kp NON_US_BACKSLASH
                                     &kp LEFT_GUI  &trans     &trans                                                                    &kp LA(LEFT)  &kp DEL      &kp LA(SPACE)
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans     &trans     &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
